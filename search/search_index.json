{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SimplyMap Documentation","text":"<p>SimplyMap is a web based application which makes performing day to day GIS (Geographical Information System) based tasks easy. It uses a dedicated Virtual Private Server as an API Backend.</p>"},{"location":"#setting-up-virtual-private-server","title":"Setting up Virtual Private Server","text":"<p>SimplyMap uses Amazon AWS t2.micro instance (currently free tier) as its API backend. To read steps to set up the same head here</p>"},{"location":"#setting-up-the-front-end","title":"Setting up the Front End","text":""},{"location":"#setting-up-the-documentation","title":"Setting up the Documentation","text":"<p>Please head here</p>"},{"location":"server/","title":"Server Setup","text":""},{"location":"server/#setting-up-amazon-aws-ec2-t2micro-instance","title":"Setting up Amazon AWS EC2 t2.micro instance","text":"<p>It is pretty straight forward.  </p> <ol> <li>Sign up for Amazon AWS Free Tier.  </li> <li>Log into the Amazon AWS Console and go to EC2 Instances.  </li> <li>Create a fresh t2.micro instance. It is a CLI-based server.  </li> <li>Launch the t2.micro instance. You'll be able to see its public IPv4 address.  </li> <li>There is an option to generate an SSH key. The key file will have a <code>.pem</code> extension. Download it and keep it safe.  </li> <li>Now that we have our server set up, we can SSH into it. In our terminal, we run:</li> </ol> <pre><code>ssh -i \"t2microKey.pem\" ubuntu@ec2-44-243-118-166.us-west-2.compute.amazonaws.com\n</code></pre> <p>Replace <code>t2microKey.pem</code> with the path to your downloaded key file and <code>ec2-44-243-118-166.us-west-2.compute.amazonaws.com</code> is the server's public IPv4 domain name. <code>ubuntu</code> is the default username for the server.</p>"},{"location":"server/#security-note","title":"Security Note","text":"<p>Ensure that your <code>.pem</code> file has the correct permissions. You can set the appropriate permissions using the following command:</p> <pre><code>chmod 400 t2microKey.pem\n</code></pre>"},{"location":"server/#installing-required-tools","title":"Installing required tools","text":"<p>Now that we have successfully SSH'ed into our remote server we can try out simple commands for example: bash<pre><code>$ ll\ntotal 28\ndrwxr-x--- 4 ubuntu ubuntu 4096 Apr 10 11:47 ./\ndrwxr-xr-x 3 root   root   4096 Apr 10 11:40 ../\n-rw-r--r-- 1 ubuntu ubuntu  220 Mar 31  2024 .bash_logout\n-rw-r--r-- 1 ubuntu ubuntu 3771 Mar 31  2024 .bashrc\ndrwx------ 2 ubuntu ubuntu 4096 Apr 10 11:47 .cache/\n-rw-r--r-- 1 ubuntu ubuntu  807 Mar 31  2024 .profile\ndrwx------ 2 ubuntu ubuntu 4096 Apr 10 11:40 .ssh/\n</code></pre></p> <p>We will be presented with the server's clean and default directory structure.</p>"},{"location":"server/#1-first-we-update-system-packages","title":"1. First we update system packages","text":"bash<pre><code>sudo apt update\nsudo apt upgrade -y\n</code></pre>"},{"location":"server/#2-install-python-and-pip","title":"2. Install Python and pip","text":"<p>Check if Python 3 is already installed. If not, install it along with pip (Python package installer). Even if Python 3 is installed, running the following scripts will update it to the latest version, so it is a good practice to run these scripts bash<pre><code>sudo apt install -y python3 python3-pip\n</code></pre></p>"},{"location":"server/#3-installing-flask-and-other-necessary-libraries","title":"3. Installing Flask and other necessary libraries","text":"<p>Install Flask, a library to handle geospatial data (like <code>geopandas</code> and <code>fiona</code>), and any other libraries you might need for KML/Shapefile manipulation. You'll likely need to install the <code>gdal</code> and <code>geos</code> development libraries first. bash<pre><code>sudo apt install -y libgdal-dev libgeos-dev\n</code></pre> Till now our installation were being done globally. Now to install Flask , geopandas and fiona, we will use pip. Installing through pip usually gives error if done outside a virtual invironment. <pre><code>$ pip3 install Flask geopandas fiona\n\nerror: externally-managed-environment\n\n\n\n\u00d7 This environment is externally managed\n\n\u2570\u2500&gt; To install Python packages system-wide, try apt install\n\n\u00a0 \u00a0 python3-xyz, where xyz is the package you are trying to\n\n\u00a0 \u00a0 install.\n\n\u00a0 \u00a0\u00a0\n\n\u00a0 \u00a0 If you wish to install a non-Debian-packaged Python package,\n\n\u00a0 \u00a0 create a virtual environment using python3 -m venv path/to/venv.\n\n\u00a0 \u00a0 Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make\n\n\u00a0 \u00a0 sure you have python3-full installed.\n\n\u00a0 \u00a0\u00a0\n\n\u00a0 \u00a0 If you wish to install a non-Debian packaged Python application,\n\n\u00a0 \u00a0 it may be easiest to use pipx install xyz, which will manage a\n\n\u00a0 \u00a0 virtual environment for you. Make sure you have pipx installed.\n\n\u00a0 \u00a0\u00a0\n\n\u00a0 \u00a0 See /usr/share/doc/python3.12/README.venv for more information.\n\n\n\nnote: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.\n</code></pre> To solve this problem we will install <code>python3-venv</code> and create a <code>projects</code> directory inside our server and to work with. bash<pre><code>sudo apt install -y python3-venv\nmkdir projects\ncd projects\n</code></pre> Now we are ready to create a python virtual environment inside our projects directory and activate it bash<pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre> By now our <code>projects</code> directory structure should look like this:</p> <p><pre><code>projects/\n\u251c\u2500\u2500 venv/\n\u2502   \u251c\u2500\u2500 bin/\n\u2502   \u251c\u2500\u2500 include/\n\u2502   \u251c\u2500\u2500 lib/\n\u2502   \u2514\u2500\u2500 pyvenv.cfg\n</code></pre> Install Flask, geopandas, and fiona within the virtual environment: Now that the virtual environment is active, <code>pip3</code> will install packages within this isolated environment. While inside projects directory run : bash<pre><code>pip3 install Flask geopandas fiona\n</code></pre></p>"},{"location":"server/#coding-api-logic","title":"Coding API Logic","text":""},{"location":"server/#1-creating-a-barebones-apppy-file","title":"1. Creating a barebones app.py file","text":"<p>Now that we have our libraries installed, we can proceed towards coding API logic. While still being in python virtual environment, create a directory <code>simply-flask</code> inside projects directory bash<pre><code>mkdir simply-flask\ncd simply-flask\n</code></pre> Create <code>app.py</code> file and paste the following python code into that file. You can use nano editor to do this. bash<pre><code>touch app.py\nnano app.py\n</code></pre> Paste following python code  python<pre><code>from flask import Flask, request, jsonify\nimport geopandas as gpd\nimport io\nimport os\n\napp = Flask(__name__)\n\n# Function to convert point KML to line KML\ndef convert_point_kml_to_line_kml(kml_string):\n    try:\n        gdf = gpd.read_file(io.StringIO(kml_string), driver='KML')\n        if gdf.geometry.geom_type.iloc[0] == 'Point':\n            # Assuming all points belong to a single line\n            if not gdf.empty:\n                line_geometry = gdf.unary_union.convex_hull.boundary\n                line_gdf = gpd.GeoDataFrame([1], geometry=[line_geometry], crs=gdf.crs)\n                output_kml = line_gdf.to_kml(index=False)\n                return output_kml\n            else:\n                return \"Error: Input KML contains no point geometries.\"\n        else:\n            return \"Error: Input KML does not contain point geometries.\"\n    except Exception as e:\n        return f\"Error processing KML: {str(e)}\"\n\n@app.route('/convert/point_to_line_kml', methods=['POST'])\ndef point_to_line_kml():\n    if 'kml_file' not in request.files:\n        return jsonify({'error': 'No KML file part'}), 400\n    file = request.files['kml_file']\n    if file.filename == '':\n        return jsonify({'error': 'No selected KML file'}), 400\n    if file:\n        kml_content = file.read().decode('utf-8')\n        output = convert_point_kml_to_line_kml(kml_content)\n        if \"Error\" in output:\n            return jsonify({'error': output}), 400\n        else:\n            return output, 200, {'Content-Type': 'application/vnd.google-earth.kml+xml'}\n\nif __name__ == '__main__':\n    app.run(debug=False, host='0.0.0.0', port=5000)\n</code></pre></p>"},{"location":"server/#2-running-the-flask-application","title":"2. Running the flask application","text":"<p>Run the Flask development server: Navigate to the directory containing your app.py file and run: bash<pre><code>python3 app.py\n</code></pre> You should see output similar to <pre><code>$ python3 app.py\n * Serving Flask app 'app'\n * Debug mode: off\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on all addresses (0.0.0.0)\n * Running on http://127.0.0.1:5000\n * Running on http://172.31.29.63:5000\nPress CTRL+C to quit\n</code></pre></p>"},{"location":"server/#3-access-the-api","title":"3. Access the API","text":"<p>You can now send POST requests to your API endpoint. For the point_to_line_kml endpoint, you would send a POST request to http://your_instance_public_ip:5000/convert/point_to_line_kml with the KML file attached in the kml_file field of the form data.</p> <p>You can use tools like <code>curl</code>: bash<pre><code>curl -X POST -F \"kml_file=@your_point_file.kml\" http://your_instance_public_ip:5000/convert/point_to_line_kml -o output.kml\n</code></pre></p> <p>(Replace <code>your_instance_public_ip</code> and <code>your_point_file.kml</code> with your actual values.)</p>"},{"location":"usage/","title":"Setting up MkDocs","text":"<p>In this section, we will see through the steps required to set up MkDocs locally and link GitHub Pages to our local setup so that whenever we push the code to our GitHub Repository, our documentation hosted on GitHub Pages automatically gets updated.</p> <p>For the purpose of this setup guide we will assume our operating system to be Ubuntu 64 bits.</p>"},{"location":"usage/#pre-requisites","title":"Pre-requisites","text":"<p>Install Python and Pip (if not already installed):</p> bash<pre><code>sudo apt update\nsudo apt install python3 python3-pip\n</code></pre> <p>In case of a fresh installation of ubuntu, you won't be having <code>git</code> installed To Install Git Simply follow :</p> bash<pre><code>sudo apt install git\n</code></pre>"},{"location":"usage/#step-1-installing-mkdocs-and-its-material-theme","title":"Step 1 - Installing MkDocs and it's material theme","text":"<p>We can simply begin with creating a directory to start working </p> bash<pre><code>mkdir ~/Desktop/MkDocs_Sandbox\ncd ~/Desktop/MkDocs_Sandbox\n</code></pre> <p>Now since we are inside our sanbox directory, we can begin MkDocs installation. Its a good practice to create a python virtual environment as installation of MkDocs might thrown some errors if installing globally. Run the following command to create a virtual environment (we'll call it venv)</p> bash<pre><code>python3 -m venv venv\n</code></pre> <p>This only needs to be done once. Next time while starting the work, we just need to activate the virtual environment and not create it once more. If we run <code>python3 -m venv venv</code> everytime we start the terminal, we will have to reinstall mkdocs and mkdocs-material. By now our director structure should look like this </p> <pre><code>~/Desktop/MkDocs_Sandbox\n\u251c\u2500\u2500 venv/\n</code></pre> <p>To activate the Python virtual environment, run the following command:</p> bash<pre><code>source venv/bin/activate\n</code></pre> <p>Once activated, your terminal prompt will change to indicate that the virtual environment is active. You can now proceed with installing MkDocs and its dependencies. To read more about Python virtual environment head over here</p> <p>Now, install MkDocs using pip within the active virtual environment:</p> bash<pre><code>pip install mkdocs\n</code></pre> <p>Similarly, install the Material for MkDocs theme</p> bash<pre><code>pip install mkdocs-material\n</code></pre>"},{"location":"usage/#step-2-creating-mkdocs-project","title":"Step 2 - Creating MkDocs Project","text":"<p>Remember that we were in MkDocs_Sandbox directory? i.e ~/Desktop/MkDocs_Sandbox run:</p> bash<pre><code>mkdocs new simplymap-docs\ncd simplymap-docs\n</code></pre> <p>By now our directory structure should look like this:</p> <pre><code>~/Desktop/MkDocs_Sandbox\n\u251c\u2500\u2500 venv/\n\u251c\u2500\u2500 simplymap-docs/\n    \u251c\u2500\u2500 mkdocs.yml\n    \u251c\u2500\u2500 docs/\n        \u251c\u2500\u2500 index.md\n        \u251c\u2500\u2500 usage.md\n        \u251c\u2500\u2500 api.md\n</code></pre> <p>By now we have setup our barebones MkDocs Project by the name of simplymap-docs</p>"},{"location":"usage/#step-3-configure-mkdocs-mkdocsyml","title":"Step 3 - Configure MkDocs (mkdocs.yml):","text":"<p>Open the mkdocs.yml file in your project directory with a text editor and configure it as needed. Here's the same basic configuration using the Material theme:</p> yml<pre><code>site_name: SimplyMap Documentation\ntheme:\n  name: material\nnav:\n    - Home: index.md\n    - Usage: usage.md\n    - API Reference: api.md\n</code></pre> <p>Since the <code>nav</code> section in <code>mkdocs.yml</code> references <code>index.md</code> and <code>api.md</code>, we need to create these files in the <code>docs/</code> directory.</p> <ol> <li>Create <code>index.md</code>:    Navigate to the <code>docs/</code> directory and create the <code>index.md</code> file. This will serve as the homepage of your documentation.</li> </ol> bash<pre><code>   cd docs\n   echo \"# Welcome to SimplyMap Documentation\" &gt; index.md\n</code></pre> <ol> <li>Create <code>api.md</code>:    Similarly, create the <code>api.md</code> file to document the API reference.</li> </ol> bash<pre><code>   echo \"# API Reference\" &gt; api.md\n</code></pre> <p>After creating these files, your <code>docs/</code> directory should look like this:</p> <pre><code>~/Desktop/MkDocs_Sandbox/simplymap-docs/docs/\n\u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 usage.md\n\u251c\u2500\u2500 api.md\n</code></pre> <p>Now, you can proceed to edit these files to include the content you want for your documentation.</p>"},{"location":"usage/#step-4-build-your-mkdocs-site","title":"Step 4 - Build Your MkDocs Site:","text":"<p>Build your MkDocs site while the virtual environment is still active: bash<pre><code>mkdocs build\n</code></pre> This will create the <code>site</code> directory within your <code>simplymap-docs</code> project.</p>"},{"location":"usage/#step-5-configure-github-pages-deployment-within-the-virtual-environment","title":"Step 5 - Configure GitHub Pages Deployment within the Virtual Environment:","text":"<p>Install the gh-deploy plugin within the active virtual environment: bash<pre><code>pip install mkdocs-material-extensions  # If you are using Material for MkDocs\npip install mkdocs-git-revision-date-plugin # Optional\npip install mkdocs-deploy-gh-pages\n</code></pre></p>"},{"location":"usage/#step-6-initialize-git-for-deployment","title":"Step 6 - Initialize Git for Deployment","text":"<p>Before deploying to GitHub Pages, you need to initialize Git in your <code>simplymap-docs</code> project directory and link it to your GitHub repository. Follow these steps:</p> <ol> <li>Initialize Git:    Navigate to the root of your <code>simplymap-docs</code> project and initialize a Git repository.</li> </ol> bash<pre><code>   cd ~/Desktop/MkDocs_Sandbox/simplymap-docs\n   git init\n</code></pre> <ol> <li>Add Files to the Repository:    Add all the files in your project to the Git repository.</li> </ol> bash<pre><code>   git add .\n</code></pre> <ol> <li>Commit the Changes:    Commit the added files with an appropriate commit message.</li> </ol> bash<pre><code>   git commit -m \"Initial commit for MkDocs project\"\n</code></pre> <ol> <li>Link to a GitHub Repository:    Add the remote URL of your GitHub repository. Here assuming that SSH URL of our git repository is : git@github.com:amritanshusingh/SimplyMap.git</li> </ol> bash<pre><code>   git remote add origin git@github.com:amritanshusingh/SimplyMap.git\n</code></pre> <ol> <li>Push the Changes:    Push the changes to the <code>main</code> branch of your GitHub repository. If your default branch is <code>master</code>, you can rename it to <code>main</code> using the following commands:</li> </ol> bash<pre><code>   # Rename the default branch to main\n   git branch -M main\n\n   # Push the changes to the remote repository\n   git push -u origin main\n</code></pre> <p>This ensures that your repository uses <code>main</code> as the default branch, which is now the standard for most Git hosting platforms like GitHub.</p>"},{"location":"usage/#step-61-generate-ssh-keys-for-github-authentication","title":"Step 6.1 - Generate SSH Keys for GitHub Authentication","text":"<p>If you encounter an authentication error when running <code>git push -u origin main</code>, you need to set up SSH keys for GitHub authentication. Follow these steps:</p> <ol> <li>Generate an SSH Key Pair:    Run the following command to generate a new SSH key pair. Replace <code>your_email@example.com</code> with the email address associated with your GitHub account.</li> </ol> bash<pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> <p>When prompted, press <code>Enter</code> to save the key in the default location (<code>~/.ssh/id_ed25519</code>) and optionally set a passphrase for added security.</p> <ol> <li>Add the Public Key to GitHub:    Copy the contents of your public key to your clipboard:</li> </ol> bash<pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre> <ul> <li>Log in to your GitHub account.</li> <li>Go to Settings &gt; SSH and GPG keys &gt; New SSH key.</li> <li> <p>Paste the public key into the \"Key\" field, give it a title, and click Add SSH key.</p> </li> <li> <p>Start the SSH Agent:    Start the SSH agent to manage your private key:</p> </li> </ul> bash<pre><code>eval \"$(ssh-agent -s)\"\n</code></pre> <ol> <li>Add the Private Key to the SSH Agent:    Add your private key to the SSH agent:</li> </ol> bash<pre><code>ssh-add ~/.ssh/id_ed25519\n</code></pre> <ol> <li>Test the SSH Connection:    Verify that your SSH key is correctly configured by testing the connection to GitHub:</li> </ol> bash<pre><code>ssh -T git@github.com\n</code></pre> <p>If successful, you will see a message like: <code>Hi &lt;username&gt;! You've successfully authenticated, but GitHub does not provide shell access.</code></p> <ol> <li>Retry the Git Push Command:    Now that your SSH key is configured, retry the <code>git push</code> command:</li> </ol> bash<pre><code>git push -u origin main\n</code></pre> <p>This should successfully push your changes to the <code>main</code> branch of your GitHub repository.</p> <p>Now your project is ready for deployment to GitHub Pages.</p>"},{"location":"usage/#step-7-deploy-to-github-pages-within-the-virtual-environment","title":"Step 7 -  Deploy to GitHub Pages within the Virtual Environment:","text":"<p>Run the deployment command while your virtual environment is active: bash<pre><code>mkdocs gh-deploy\n</code></pre> This will build your site (if necessary), create or update the gh-pages branch, and push it to your GitHub repository.</p>"},{"location":"usage/#step-8-enable-github-pages-for-your-repository","title":"Step 8 -  Enable GitHub Pages for Your Repository:","text":"<ol> <li>Go to your repository: https://github.com/amritanshusingh/SimplyMap  </li> <li>Click on Settings.  </li> <li>Go to the Pages section.  </li> <li>Set the \"Source\" to Deploy from a branch.  </li> <li>Select the gh-pages branch.  </li> <li>Ensure the \"Folder\" is set to /(root).  </li> <li>Click Save.</li> </ol> <p>Your documentation site will be available at https://amritanshusingh.github.io/SimplyMap/ after a short while.</p>"},{"location":"usage/#step-9-deactivating-the-virtual-environment-when-done","title":"Step 9 - Deactivating the Virtual Environment (When Done):","text":"<p>When you are finished working on your documentation for the time being, you can deactivate the virtual environment: bash<pre><code>deactivate\n</code></pre> Your terminal prompt will return to its normal state.</p> <p>Everytime you make any changes to documentation pages (like index.md or usage.md etc) you'll have to stage your changes, commit and push to origin <code>main</code> branch. This push needs to be followed by </p> <p>bash<pre><code>mkdocs gh-deploy\n</code></pre> command to automatically re-build GitHub page SimplyMap Documentation static site and incorporate the changes from main branch to gh-pages branch which by the way acts as the source branch for our GitHub Pages SimplyMap Documentation site.</p>"}]}