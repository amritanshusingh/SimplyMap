{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SimplyMap Documentation","text":"<p>SimplyMap is a web based application which makes performing day to day GIS (Geographical Information System) based tasks easy. It uses a dedicated Virtual Private Server as an API Backend.</p>"},{"location":"#setting-up-virtual-private-server","title":"Setting up Virtual Private Server","text":"<p>SimplyMap uses Amazon AWS t2.micro instance (currently free tier) as its API backend. To read steps to set up the same head here</p>"},{"location":"#setting-up-the-front-end","title":"Setting up the Front End","text":""},{"location":"#setting-up-the-documentation","title":"Setting up the Documentation","text":"<p>Please head here</p>"},{"location":"server/","title":"Server Setup","text":""},{"location":"server/#setting-up-amazon-aws-ec2-t2micro-instance","title":"Setting up Amazon AWS EC2 t2.micro instance","text":"<p>It is pretty straight forward.  1. Sign-up for Amazon AWS Free tier.  2. Log into Amazon AWS Console and go to EC2 Instances. 3. Create a fresh t2.micro instance. It is CLI based server. 4. Launch t2.micro instance. You'll be able to see its public ipv4 address. 5. There is an option to generate an ssh key. It comes with a .pem extension. Download it and keep it safe 6. Now that we have our server setup we can ssh into it. In our terminal we go : <pre><code>ssh -i t2microKey.pem ubuntu@XX.XX.XX.XXX\n</code></pre> XX.XX.XX.XXX is our t2 micro server's public ipv4. ubuntu is our username for the server.</p>"},{"location":"server/#installing-required-tools","title":"Installing required tools","text":""},{"location":"usage/","title":"Setting up MkDocs","text":"<p>In this section, we will see through the steps required to set up MkDocs locally and link GitHub Pages to our local setup so that whenever we push the code to our GitHub Repository, our documentation hosted on GitHub Pages automatically gets updated.</p> <p>For the purpose of this setup guide we will assume our operating system to be Ubuntu 64 bits.</p>"},{"location":"usage/#pre-requisites","title":"Pre-requisites","text":"<p>Install Python and Pip (if not already installed):</p> bash<pre><code>sudo apt update\nsudo apt install python3 python3-pip\n</code></pre> <p>In case of a fresh installation of ubuntu, you won't be having <code>git</code> installed To Install Git Simply follow :</p> bash<pre><code>sudo apt install git\n</code></pre>"},{"location":"usage/#step-1-installing-mkdocs-and-its-material-theme","title":"Step 1 - Installing MkDocs and it's material theme","text":"<p>We can simply begin with creating a directory to start working </p> bash<pre><code>mkdir ~/Desktop/MkDocs_Sandbox\ncd ~/Desktop/MkDocs_Sandbox\n</code></pre> <p>Now since we are inside our sanbox directory, we can begin MkDocs installation. Its a good practice to create a python virtual environment as installation of MkDocs might thrown some errors if installing globally. Run the following command to create a virtual environment (we'll call it venv)</p> bash<pre><code>python3 -m venv venv\n</code></pre> <p>This only needs to be done once. Next time while starting the work, we just need to activate the virtual environment and not create it once more. If we run <code>python3 -m venv venv</code> everytime we start the terminal, we will have to reinstall mkdocs and mkdocs-material. By now our director structure should look like this </p> <pre><code>~/Desktop/MkDocs_Sandbox\n\u251c\u2500\u2500 venv/\n</code></pre> <p>To activate the Python virtual environment, run the following command:</p> bash<pre><code>source venv/bin/activate\n</code></pre> <p>Once activated, your terminal prompt will change to indicate that the virtual environment is active. You can now proceed with installing MkDocs and its dependencies. To read more about Python virtual environment head over here</p> <p>Now, install MkDocs using pip within the active virtual environment:</p> bash<pre><code>pip install mkdocs\n</code></pre> <p>Similarly, install the Material for MkDocs theme</p> bash<pre><code>pip install mkdocs-material\n</code></pre>"},{"location":"usage/#step-2-creating-mkdocs-project","title":"Step 2 - Creating MkDocs Project","text":"<p>Remember that we were in MkDocs_Sandbox directory? i.e ~/Desktop/MkDocs_Sandbox run:</p> bash<pre><code>mkdocs new simplymap-docs\ncd simplymap-docs\n</code></pre> <p>By now our directory structure should look like this:</p> <pre><code>~/Desktop/MkDocs_Sandbox\n\u251c\u2500\u2500 venv/\n\u251c\u2500\u2500 simplymap-docs/\n    \u251c\u2500\u2500 mkdocs.yml\n    \u251c\u2500\u2500 docs/\n        \u251c\u2500\u2500 index.md\n        \u251c\u2500\u2500 usage.md\n        \u251c\u2500\u2500 api.md\n</code></pre> <p>By now we have setup our barebones MkDocs Project by the name of simplymap-docs</p>"},{"location":"usage/#step-3-configure-mkdocs-mkdocsyml","title":"Step 3 - Configure MkDocs (mkdocs.yml):","text":"<p>Open the mkdocs.yml file in your project directory with a text editor and configure it as needed. Here's the same basic configuration using the Material theme:</p> yml<pre><code>site_name: SimplyMap Documentation\ntheme:\n  name: material\nnav:\n    - Home: index.md\n    - Usage: usage.md\n    - API Reference: api.md\n</code></pre> <p>Since the <code>nav</code> section in <code>mkdocs.yml</code> references <code>index.md</code> and <code>api.md</code>, we need to create these files in the <code>docs/</code> directory.</p> <ol> <li>Create <code>index.md</code>:    Navigate to the <code>docs/</code> directory and create the <code>index.md</code> file. This will serve as the homepage of your documentation.</li> </ol> bash<pre><code>   cd docs\n   echo \"# Welcome to SimplyMap Documentation\" &gt; index.md\n</code></pre> <ol> <li>Create <code>api.md</code>:    Similarly, create the <code>api.md</code> file to document the API reference.</li> </ol> bash<pre><code>   echo \"# API Reference\" &gt; api.md\n</code></pre> <p>After creating these files, your <code>docs/</code> directory should look like this:</p> <pre><code>~/Desktop/MkDocs_Sandbox/simplymap-docs/docs/\n\u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 usage.md\n\u251c\u2500\u2500 api.md\n</code></pre> <p>Now, you can proceed to edit these files to include the content you want for your documentation.</p>"},{"location":"usage/#step-4-build-your-mkdocs-site","title":"Step 4 - Build Your MkDocs Site:","text":"<p>Build your MkDocs site while the virtual environment is still active: bash<pre><code>mkdocs build\n</code></pre> This will create the <code>site</code> directory within your <code>simplymap-docs</code> project.</p>"},{"location":"usage/#step-5-configure-github-pages-deployment-within-the-virtual-environment","title":"Step 5 - Configure GitHub Pages Deployment within the Virtual Environment:","text":"<p>Install the gh-deploy plugin within the active virtual environment: bash<pre><code>pip install mkdocs-material-extensions  # If you are using Material for MkDocs\npip install mkdocs-git-revision-date-plugin # Optional\npip install mkdocs-deploy-gh-pages\n</code></pre></p>"},{"location":"usage/#step-6-initialize-git-for-deployment","title":"Step 6 - Initialize Git for Deployment","text":"<p>Before deploying to GitHub Pages, you need to initialize Git in your <code>simplymap-docs</code> project directory and link it to your GitHub repository. Follow these steps:</p> <ol> <li>Initialize Git:    Navigate to the root of your <code>simplymap-docs</code> project and initialize a Git repository.</li> </ol> bash<pre><code>   cd ~/Desktop/MkDocs_Sandbox/simplymap-docs\n   git init\n</code></pre> <ol> <li>Add Files to the Repository:    Add all the files in your project to the Git repository.</li> </ol> bash<pre><code>   git add .\n</code></pre> <ol> <li>Commit the Changes:    Commit the added files with an appropriate commit message.</li> </ol> bash<pre><code>   git commit -m \"Initial commit for MkDocs project\"\n</code></pre> <ol> <li>Link to a GitHub Repository:    Add the remote URL of your GitHub repository. Here assuming that SSH URL of our git repository is : git@github.com:amritanshusingh/SimplyMap.git</li> </ol> bash<pre><code>   git remote add origin git@github.com:amritanshusingh/SimplyMap.git\n</code></pre> <ol> <li>Push the Changes:    Push the changes to the <code>main</code> branch of your GitHub repository. If your default branch is <code>master</code>, you can rename it to <code>main</code> using the following commands:</li> </ol> bash<pre><code>   # Rename the default branch to main\n   git branch -M main\n\n   # Push the changes to the remote repository\n   git push -u origin main\n</code></pre> <p>This ensures that your repository uses <code>main</code> as the default branch, which is now the standard for most Git hosting platforms like GitHub.</p>"},{"location":"usage/#step-61-generate-ssh-keys-for-github-authentication","title":"Step 6.1 - Generate SSH Keys for GitHub Authentication","text":"<p>If you encounter an authentication error when running <code>git push -u origin main</code>, you need to set up SSH keys for GitHub authentication. Follow these steps:</p> <ol> <li>Generate an SSH Key Pair:    Run the following command to generate a new SSH key pair. Replace <code>your_email@example.com</code> with the email address associated with your GitHub account.</li> </ol> bash<pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> <p>When prompted, press <code>Enter</code> to save the key in the default location (<code>~/.ssh/id_ed25519</code>) and optionally set a passphrase for added security.</p> <ol> <li>Add the Public Key to GitHub:    Copy the contents of your public key to your clipboard:</li> </ol> bash<pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre> <ul> <li>Log in to your GitHub account.</li> <li>Go to Settings &gt; SSH and GPG keys &gt; New SSH key.</li> <li> <p>Paste the public key into the \"Key\" field, give it a title, and click Add SSH key.</p> </li> <li> <p>Start the SSH Agent:    Start the SSH agent to manage your private key:</p> </li> </ul> bash<pre><code>eval \"$(ssh-agent -s)\"\n</code></pre> <ol> <li>Add the Private Key to the SSH Agent:    Add your private key to the SSH agent:</li> </ol> bash<pre><code>ssh-add ~/.ssh/id_ed25519\n</code></pre> <ol> <li>Test the SSH Connection:    Verify that your SSH key is correctly configured by testing the connection to GitHub:</li> </ol> bash<pre><code>ssh -T git@github.com\n</code></pre> <p>If successful, you will see a message like: <code>Hi &lt;username&gt;! You've successfully authenticated, but GitHub does not provide shell access.</code></p> <ol> <li>Retry the Git Push Command:    Now that your SSH key is configured, retry the <code>git push</code> command:</li> </ol> bash<pre><code>git push -u origin main\n</code></pre> <p>This should successfully push your changes to the <code>main</code> branch of your GitHub repository.</p> <p>Now your project is ready for deployment to GitHub Pages.</p>"},{"location":"usage/#step-7-deploy-to-github-pages-within-the-virtual-environment","title":"Step 7 -  Deploy to GitHub Pages within the Virtual Environment:","text":"<p>Run the deployment command while your virtual environment is active: bash<pre><code>mkdocs gh-deploy\n</code></pre> This will build your site (if necessary), create or update the gh-pages branch, and push it to your GitHub repository.</p>"},{"location":"usage/#step-8-enable-github-pages-for-your-repository","title":"Step 8 -  Enable GitHub Pages for Your Repository:","text":"<ol> <li>Go to your repository: https://github.com/amritanshusingh/SimplyMap  </li> <li>Click on Settings.  </li> <li>Go to the Pages section.  </li> <li>Set the \"Source\" to Deploy from a branch.  </li> <li>Select the gh-pages branch.  </li> <li>Ensure the \"Folder\" is set to /(root).  </li> <li>Click Save.</li> </ol> <p>Your documentation site will be available at https://amritanshusingh.github.io/SimplyMap/ after a short while.</p>"},{"location":"usage/#step-9-deactivating-the-virtual-environment-when-done","title":"Step 9 - Deactivating the Virtual Environment (When Done):","text":"<p>When you are finished working on your documentation for the time being, you can deactivate the virtual environment: bash<pre><code>deactivate\n</code></pre> Your terminal prompt will return to its normal state.</p> <p>Everytime you make any changes to documentation pages (like index.md or usage.md etc) you'll have to stage your changes, commit and push to origin <code>main</code> branch. This push needs to be followed by </p> <p>bash<pre><code>mkdocs gh-deploy\n</code></pre> command to automatically re-build GitHub page SimplyMap Documentation static site and incorporate the changes from main branch to gh-pages branch which by the way acts as the source branch for our GitHub Pages SimplyMap Documentation site.</p>"}]}